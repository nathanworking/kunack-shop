{# Watch out—these aren't the same as element IDs! #}
{% set product = craft.shopifyProducts
  .shopifyId(8893665411355)
  .one() %}

{% set defaultVariant = product.getDefaultVariant() %}

<div class="bg-primary-light">
  <div class="pb-16 pt-6 sm:pb-24">
    <nav aria-label="Breadcrumb" class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
      <ol role="list" class="flex items-center space-x-4">
        <li>
          <div class="flex items-center">
            <a href="#" class="mr-4 type_xs font-medium text-primary-dark">Women</a>
            <svg viewBox="0 0 6 20" aria-hidden="true" class="h-5 w-auto text-secondary-dark">
              <path d="M4.878 4.34H3.551L.27 16.532h1.327l3.281-12.19z" fill="currentColor" />
            </svg>
          </div>
        </li>
        <li>
          <div class="flex items-center">
            <a href="#" class="mr-4 type_xs font-medium text-primary-dark">Clothing</a>
            <svg viewBox="0 0 6 20" aria-hidden="true" class="h-5 w-auto text-secondary-dark">
              <path d="M4.878 4.34H3.551L.27 16.532h1.327l3.281-12.19z" fill="currentColor" />
            </svg>
          </div>
        </li>

        <li class="type_xs">
          <a href="#" aria-current="page" class="font-medium text-secondary-dark">{{ product.title }}</a>
        </li>
      </ol>
    </nav>
    <div class="mx-auto mt-8 max-w-2xl px-4 sm:px-6 lg:max-w-7xl lg:px-8">
      <div class="lg:grid lg:auto-rows-min lg:grid-cols-12 lg:gap-x-8">
        <div class="lg:col-span-5 lg:col-start-8">
          <div class="flex justify-between">
            <h1 class="type_lg font-medium text-primary-dark">{{ product.title }}</h1>
            <p class="type_lg font-medium text-primary-dark" id="price">{{ defaultVariant.price|currency }}</p>
          </div>
        </div>

        <!-- Image gallery -->
        <div class="mt-8 lg:col-span-7 lg:col-start-1 lg:row-span-3 lg:row-start-1 lg:mt-0">
          <h2 class="sr-only">Images</h2>

          <div class="grid grid-cols-1 lg:grid-cols-2 lg:grid-rows-3 lg:gap-8">
               {% for image in product.images %}
                    <img 
                         src="{{ image.src }}"
                         alt="{{ image.alt }}"
                         {% if loop.first %}
                              class="lg:col-span-2 lg:row-span-2 rounded-lg"
                         {% else %}
                              class="hidden lg:block rounded-lg"
                         {% endif %}
                    >
               {% endfor %}
          </div>
        </div>

        <div class="mt-8 lg:col-span-5">
          <form id="add-to-cart" method="post" action="{{ craft.shopify.store.getUrl('cart/add') }}">

          {# Create a hidden input to send the resolved variant ID to Shopify: #}
          {{ hiddenInput('id', null, {
          id: 'variant',
          data: {
               variants: product.variants,
          },
          }) }}

          
          {% for option in product.options %}
               <div class="mt-8">
               <div class="flex items-center justify-between">
                    <h2 class="type_xs font-medium text-primary-dark">{{option.name}}</h2>
               </div>
               <fieldset class="mt-2">
                    <div class="grid grid-cols-3 gap-3 sm:grid-cols-6">
                         {% for value in option.values %}
                              <label class="flex items-center justify-center rounded-md border py-3 px-3 type_xs font-medium uppercase sm:flex-1 cursor-pointer focus:outline-none">
                                   <input type="radio" class="sr-only" data-option="{{option.position}}" value="{{value}}">
                                   <span id="size-choice-0-label">{{value}}</span>
                              </label>
                         {%  endfor %}
                    </div>
               </fieldset>
          {% endfor %}

               <button type="submit" class="mt-8 flex w-full btn btn--accent  ">Add to cart</button>
          </form>

          <!-- Product details -->
          <div class="mt-10">
            <h2 class="type_xs font-medium text-primary-dark">Description</h2>

            <div class="prose prose-sm mt-4 text-secondary-dark">
              {{product.bodyHtml|raw}}
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

{% js %}

// Store references to <form> elements:
const $form = document.getElementById("add-to-cart");
const $variantInput = document.getElementById("variant");
const $optionInputs = document.querySelectorAll("[data-option]");

// Create a helper function to test a map of options against known variants:
const findVariant = (options) => {
  const variants = JSON.parse($variantInput.dataset.variants);

  // Use labels for the inner and outer loop so we can break out early:
  variant: for (const v in variants) {
    option: for (const o in options) {
      // Option values are stored as `option1`, `option2`, or `option3` on each variant:
      if (variants[v][`option${o}`] !== options[o]) {
        // Didn't match one of the options? Bail:
        continue variant;
      }
    }
    // Nice, all options matched this variant! Return it:
    return variants[v];
  }
};

// Listen for change events on the form, rather than the individual option menus:
$form.addEventListener("change", (e) => {
  const selectedOptions = {};

  // Loop over option menus and build an object of selected values:
  $optionInputs.forEach(($input) => {
    // Add the value under the "position" key
    selectedOptions[$input.dataset.option] = $input.value;
  });

  // Use our helper function to resolve a variant:
  const variant = findVariant(selectedOptions);

  if (!variant) {
    console.warn("No variant exists for options:", selectedOptions);

    return;
  }

  // Assign the resolved variant’s ID to the hidden input:
  $variantInput.value = variant.id;

  // update price in UI
  console.dir(variant);
  document.getElementById("price").innerHTML = "$" + variant.price;
});

// Trigger an initial `change` event to simulate a selection:
$form.dispatchEvent(new Event("change"));

{% endjs %}
